class Screen {

	static int SCREEN;
	static boolean color;
	static Array bitmask;

	// Update: Screen should directly access memory for faster updates.
	static Array memory;

    /** Initializes the Screen. */
    function void init() {
    	let SCREEN = 57342;
		let memory = 0;
    	return;
    }
    
    function void setColor(boolean Color) {
    	let color = Color;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
		var int i;

		let i=SCREEN;
		while (~(i=)) {
			let memory[i] = 0;
			let i=i+1;
		}

		return;
    }
	
	function void initBitmaskArray() {
    	var int i, cur;
    	let bitmask = Array.new(16);
    	let cur = 1;
    	let i = 0;
    	while(i < 16) {
    		let bitmask[i] = cur;
    		let cur = cur + cur;
    		let i = i + 1;
    	}
    	return;
    }
	
	/** 
	* Efficiently calculates modulo 2^n of a given number
	*/
	function int moduloPower2(int num, int x) {
		return (num & (x-1));
	}


    function void drawPixel(int x, int y) {
    	var int loc, temp, pixel;
    	let loc = SCREEN + (y*32) + (x/16);
		let pixel = (x & (16-1)); // moduloPower2
    	let temp = memory[loc];
    	
		if (color) { let temp = (temp | bitmask[pixel]); }
		else { let temp = (temp & (~bitmask[pixel])); }
    	
		let memory[loc] = temp;
    	return;
    }

    // Draws a line from (x1,y1) to (x2,y2)
    function drawLine(int x, int y, int x1, int y1){
        int dx = x2 - x; 
        int dy = y2 – y;
        int a = 0; 
        int b = 0; 
        int diff = 0;
  
        while ((a <= dx) and (b <= dy)){
            drawPixel(x + a, y + b);
            // decide which way to go (up, or right)
            if (diff < 0) { a++; diff += dy; }
            else { b++; diff -= dx; }
        }
    }
    function void drawHorizontalLine(int x, int y, int dx) {
    	var int i,j;
	let i = 0;
		
    	while (~(i>dx)) {
   		do Screen.drawPixel(x+i, y);
   		let i = i+1;
    	}

    	return;
    }


        /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
    	var int dy, temp, rsqrt;
    	let dy = -r;
    	let rsqrt = r * r;
    	while (~(dy > r)) {
    		let temp = Math.sqrt(rsqrt - (dy * dy));
    		do Screen.drawHorizontalLineOptimized(cx - temp, cy + dy, temp * 2);
    		let dy = dy + 1;
    		}
	    return;
    	}
	}

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        
        let y = y1;
        while( ~(y > y2) ) {
            do Screen.drawHorizontalLine(x1, x2, y);
            let y = y + 1;
        }
        return;
    }


